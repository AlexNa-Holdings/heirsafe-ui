This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  favicon.svg
  logo-heirsafe.svg
  safari-pinned-tab.svg
  site.webmanifest
src/
  abi/
    HeirSafeModule.ts
    HeirSafeModuleFactory.ts
    Safe.ts
  assets/
    react.svg
  components/
    Address.tsx
    AppFooter.tsx
    AppHeader.tsx
    BackgroundArt.tsx
    ConnectButton.tsx
    InstallModule.tsx
    Logo.tsx
    ModuleIntro.tsx
    NetworkSwitcher.tsx
    StatusBar.tsx
  config/
    chains.ts
  lib/
    moduleInstall.ts
    safeApp.ts
    safeHelpers.ts
  wallet/
    ConnectButton.tsx
    WagmiProvider.tsx
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
LICENSE
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/logo-heirsafe.svg">
<!-- Heart-on-shield logo (bigger, centered heart) -->
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <defs>
    <linearGradient id="hs-g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0" stop-color="#10b981"/>
      <stop offset="1" stop-color="#059669"/>
    </linearGradient>
  </defs>

  <!-- shield -->
  <path d="M32 4l20 6v16c0 13-8.3 24.6-20 28-11.7-3.4-20-15-20-28V10l20-6z" fill="url(#hs-g)"/>

  <!-- subtle inner highlight -->
  <path d="M12 25c0-5 0-9 0-15l20-6 20 6v5C38 16 26 18 18 22c-3 2-4 2-6 3z" fill="#ffffff" opacity=".08"/>

  <!-- heart: scale up around (32,32), then nudge up 4px -->
  <path
    transform="translate(0,-4) translate(32,32) scale(1.32) translate(-32,-32)"
    d="M32 42s-9-5.3-9-12a5 5 0 0 1 9-3 5 5 0 0 1 9 3c0 6.7-9 12-9 12z"
    fill="#0a0a0a" opacity=".88"/>
</svg>
</file>

<file path="public/site.webmanifest">
{
  "name": "HeirSafe",
  "short_name": "HeirSafe",
  "description": "Safe inheritance module UI.",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0b1220",
  "theme_color": "#111827",
  "icons": [
    { "src": "/apple-touch-icon.png?v=2", "sizes": "180x180", "type": "image/png" },
    { "src": "/favicon.svg?v=2", "sizes": "any", "type": "image/svg+xml" }
  ]
}
</file>

<file path="src/abi/HeirSafeModuleFactory.ts">
export const HeirSafeModuleFactoryABI = [
  "function implementation() view returns (address)",
  "function predict(address safe, bytes32 extraSalt) view returns (address)",
  "function deploy(address safe, bytes32 extraSalt) returns (address)",
  "event ModuleDeployed(address indexed safe, address indexed module, bytes32 salt)"
] as const;
</file>

<file path="src/abi/Safe.ts">
export const SafeABI = [
  "function getOwners() view returns (address[])",
  // Safe v1.3+: pagination over module list
  "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
  "function isOwner(address) view returns (bool)",
  // shown only for calldata building (owners will execute via Safe UI)
  "function enableModule(address module)"
] as const;

export const SENTINEL = "0x0000000000000000000000000000000000000001";
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/Address.tsx">
import { useState } from "react";

export default function Address({
  addr,
  className = "",
  start = 6,           // show "0x1234" (0x + 4 hex)
  end = 4,             // show "5678"
  variant = "pill",    // "pill" (bg) or "ghost" (minimal)
}: {
  addr: string;
  className?: string;
  start?: number;
  end?: number;
  variant?: "pill" | "ghost";
}) {
  const [copied, setCopied] = useState(false);

  if (!addr || addr === "0x0000000000000000000000000000000000000000") {
    return <span className={className}>—</span>;
  }

  const short = (() => {
    const s = addr.trim();
    if (s.length <= start + end) return s;
    return `${s.slice(0, start)}…${s.slice(-end)}`;
  })();

  async function copy() {
    try {
      await navigator.clipboard.writeText(addr);
      setCopied(true);
      setTimeout(() => setCopied(false), 900);
    } catch {
      /* ignore */
    }
  }

  const baseBtn =
    "inline-flex items-center gap-1 rounded px-2 py-1 text-xs break-all transition-colors";
  const styles =
    variant === "pill"
      ? "bg-neutral-800 hover:bg-neutral-700"
      : "hover:bg-neutral-800/40";

  // container is relative so the "(copied)" bubble can be absolutely positioned on top
  return (
    <span className={`relative inline-block ${className}`} title={addr}>
      <button
        type="button"
        onClick={copy}
        onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && copy()}
        aria-label={`Copy ${addr}`}
        className={`${baseBtn} ${styles}`}
      >
        <span>{short}</span>
        <span className="opacity-70">⧉</span>
      </button>

      {/* Floating copied bubble (no layout shift) */}
      {copied && (
        <span
          className="
            pointer-events-none absolute -top-7 left-1/2 -translate-x-1/2
            rounded bg-neutral-800 border border-neutral-700 px-2 py-1
            text-[11px] text-neutral-100 shadow-lg
          "
        >
          Copied
          <span
            className="
              absolute left-1/2 top-full -translate-x-1/2
              w-0 h-0 border-x-4 border-x-transparent border-t-4 border-t-neutral-800
            "
          />
        </span>
      )}
    </span>
  );
}
</file>

<file path="src/components/AppFooter.tsx">
export default function AppFooter({
  showAiCredit = false, // flip to true if you want to credit the AI helper
}: {
  showAiCredit?: boolean;
}) {
  return (
    <footer className="mt-10 border-t border-neutral-800">
      <div className="max-w-5xl mx-auto px-4 py-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        {/* Left: author info */}
        <div className="text-sm text-neutral-300">
          Written by <span className="font-medium text-neutral-100">Alex Na</span>
          {" · "}
          <a
            href="https://x.com/AlexNa"
            target="_blank"
            rel="noreferrer"
            className="underline decoration-neutral-600 hover:decoration-neutral-300"
            title="Alex Na on X"
          >
            @AlexNa
          </a>
          {showAiCredit && (
            <>
              {" · "}
              <span className="opacity-80">Built with assistance from</span>{" "}
              <span className="font-medium">GPT-5 Thinking</span>
            </>
          )}
        </div>

        {/* Right: repo links */}
        <nav className="flex flex-wrap gap-2">
          <a
            href="https://github.com/AlexNa-Holdings/heirsafe-module"
            target="_blank"
            rel="noreferrer"
            className="px-3 py-1.5 rounded bg-neutral-800 hover:bg-neutral-700 text-sm"
            title="heirsafe-module on GitHub"
          >
            GitHub: heirsafe-module
          </a>
          <a
            href="https://github.com/AlexNa-Holdings/heirsafe-ui"
            target="_blank"
            rel="noreferrer"
            className="px-3 py-1.5 rounded bg-neutral-800 hover:bg-neutral-700 text-sm"
            title="heirsafe-ui on GitHub"
          >
            GitHub: heirsafe-ui
          </a>
        </nav>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/BackgroundArt.tsx">
export default function BackgroundArt() {
  return (
    <div className="pointer-events-none fixed inset-0 z-0 overflow-hidden">
      {/* subtle grid */}
      <div
        className="absolute inset-0 opacity-[0.06]"
        style={{
          backgroundImage:
            "linear-gradient(rgba(255,255,255,0.12) 1px, transparent 1px), linear-gradient(90deg, rgba(255,255,255,0.12) 1px, transparent 1px)",
          backgroundSize: "44px 44px",
          backgroundPosition: "-1px -1px",
        }}
      />

      {/* central glow (very soft) */}
      <div
        className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[1200px] h-[1200px] rounded-full hs-anim-float"
        style={{
          background:
            "radial-gradient(ellipse at center, rgba(16,185,129,0.16), rgba(16,185,129,0.03) 55%, transparent 70%)",
          filter: "blur(40px)",
          willChange: "transform",
        }}
      />

      {/* giant blurred logo watermark (rotates s l o w l y) */}
      <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 hs-anim-swing" style={{ willChange: "transform" }}>
        <svg
          viewBox="0 0 32 32"
          className="w-[1000px] h-[1000px] opacity-[0.08]"
          aria-hidden
        >
          <defs>
            <linearGradient id="bg-hs-grad" x1="0" y1="0" x2="1" y2="1">
              <stop offset="0%" stopColor="#34d399" />
              <stop offset="100%" stopColor="#34d399" stopOpacity="0.7" />
            </linearGradient>
          </defs>
          <g filter="url(#blur)">
            <path
              d="M16 3.5l9 3v8.2c0 5.7-3.9 10.9-9 12.8-5.1-1.9-9-7.1-9-12.8V6.5l9-3z"
              fill="none"
              stroke="url(#bg-hs-grad)"
              strokeWidth="1.8"
            />
            <circle cx="16" cy="14" r="2.4" fill="#34d399" />
            <path
              d="M16 16.6v5.7"
              stroke="#34d399"
              strokeWidth="1.8"
              strokeLinecap="round"
            />
          </g>
        </svg>
      </div>

      {/* soft vignette for depth */}
      <div
        className="absolute inset-0"
        style={{
          WebkitMaskImage:
            "radial-gradient(ellipse at center, black 55%, transparent 90%)",
          maskImage:
            "radial-gradient(ellipse at center, black 55%, transparent 90%)",
          background:
            "radial-gradient(ellipse at center, rgba(0,0,0,0.00), rgba(0,0,0,0.35))",
        }}
      />
    </div>
  );
}
</file>

<file path="src/components/ConnectButton.tsx">
import { useAccount, useConnect, useDisconnect } from "wagmi";

function short(addr?: string) {
  return addr ? `${addr.slice(0, 6)}…${addr.slice(-4)}` : "";
}

export function ConnectButton() {
  const { address, isConnected } = useAccount();
  const { connectors, connect, status } = useConnect();
  const { disconnect } = useDisconnect();

  if (isConnected) {
    return (
      <div className="flex items-center gap-2 text-sm">
        <span className="px-2 py-1 rounded bg-neutral-800">{short(address)}</span>
        <button
          className="px-2 py-1 rounded bg-neutral-800 hover:bg-neutral-700"
          onClick={() => disconnect()}
        >
          Disconnect
        </button>
      </div>
    );
  }

  // Choose a preferred connector (Injected > WalletConnect > Coinbase)
  const injected = connectors.find(c => c.name.toLowerCase().includes("injected") || c.name.toLowerCase().includes("metamask") || c.name.toLowerCase().includes("rabby"));
  const walletConnect = connectors.find(c => c.name.toLowerCase().includes("walletconnect"));
  const coinbase = connectors.find(c => c.name.toLowerCase().includes("coinbase"));

  function handleConnect() {
    const preferred = injected ?? walletConnect ?? coinbase ?? connectors[0];
    if (!preferred) return;
    connect({ connector: preferred });
  }

  return (
    <button
      className="px-4 py-2 rounded bg-emerald-600 hover:bg-emerald-500 disabled:opacity-50"
      onClick={handleConnect}
      disabled={status === "pending" || connectors.length === 0}
    >
      {status === "pending" ? "Connecting…" : "Connect"}
    </button>
  );
}
</file>

<file path="src/components/Logo.tsx">
export default function Logo({ className = "" }: { className?: string }) {
  // "Shield + keyhole" mark for HeirSafe
  return (
    <svg
      viewBox="0 0 32 32"
      className={className}
      aria-label="HeirSafe logo"
      role="img"
    >
      <defs>
        <linearGradient id="hs-grad" x1="0" y1="0" x2="1" y2="1">
          <stop offset="0%" stopColor="currentColor" />
          <stop offset="100%" stopColor="currentColor" stopOpacity="0.65" />
        </linearGradient>
      </defs>
      {/* shield */}
      <path
        d="M16 3.5l9 3v8.2c0 5.7-3.9 10.9-9 12.8-5.1-1.9-9-7.1-9-12.8V6.5l9-3z"
        fill="none"
        stroke="url(#hs-grad)"
        strokeWidth="1.6"
      />
      {/* keyhole / heir dot */}
      <circle cx="16" cy="14" r="2.2" fill="currentColor" />
      <path
        d="M16 16.2v5.5"
        stroke="currentColor"
        strokeWidth="1.6"
        strokeLinecap="round"
      />
    </svg>
  );
}
</file>

<file path="src/components/ModuleIntro.tsx">
import { useEffect, useState } from "react";

export default function ModuleIntro() {
  const LS_KEY = "heirsafe:intro:closed";
  const [open, setOpen] = useState<boolean>(() => {
    try {
      return localStorage.getItem(LS_KEY) !== "1"; // open by default
    } catch {
      return true;
    }
  });

  // keep localStorage in sync when user toggles
  useEffect(() => {
    try {
      localStorage.setItem(LS_KEY, open ? "0" : "1");
    } catch {}
  }, [open]);

  return (
    <details
      open={open}
      onToggle={(e) => setOpen((e.target as HTMLDetailsElement).open)}
      className="rounded-2xl bg-neutral-900/70 border border-neutral-800"
    >
      <summary className="list-none cursor-pointer select-none px-4 py-3 flex items-center justify-between">
        <span className="font-medium">What is the HeirSafe module?</span>
        <span className={`transition-transform ${open ? "rotate-180" : ""}`}>
          ▼
        </span>
      </summary>

      <div className="px-4 pb-4 text-sm text-neutral-200 space-y-3">
        <p>
          HeirSafe is a Safe <em>module</em> that lets each Safe owner define a{" "}
          <strong>beneficiary</strong> and an <strong>activation time</strong>.
          After the activation time passes, that beneficiary can{" "}
          <strong>claim</strong> and replace the owner’s address in the Safe.
        </p>

        <ul className="list-disc pl-5 space-y-1 text-neutral-300">
          <li>Works per owner: each owner manages their own heir &amp; time.</li>
          <li>No funds move. Only the owner address is replaced on claim.</li>
          <li>
            Threshold isn’t changed by the module; Safe’s policy stays intact.
          </li>
          <li>
            Owners can set, prolong, or remove their configuration anytime
            (until it’s claimed).
          </li>
          <li>
            The module must be <strong>enabled</strong> on the Safe. If the
            threshold is 1 and you’re an owner, this app can send the enable
            tx directly; otherwise follow the Safe UI instructions.
          </li>
        </ul>

        <p className="text-neutral-400">
          Tip: All times you enter are in your local timezone and stored
          on-chain as UTC seconds. The table shows Local, UTC, and a live
          countdown.
        </p>
      </div>
    </details>
  );
}
</file>

<file path="src/components/StatusBar.tsx">
export default function StatusBar({ text }: { text: string }) {
  if (!text) return null;

  const t = text.toLowerCase();

  // naive classification by message
  const variant = /error|revert|fail|denied/.test(t)
    ? "error"
    : /not deployed|not enabled|unknown/.test(t)
    ? "warn"
    : /installed|confirmed|enabled|success/.test(t)
    ? "success"
    : "info";

  const styles =
    variant === "error"
      ? {
          dot: "bg-rose-400",
          label: "bg-rose-500/10 text-rose-300",
          ring: "ring-rose-800/40",
        }
      : variant === "warn"
      ? {
          dot: "bg-amber-400",
          label: "bg-amber-500/10 text-amber-300",
          ring: "ring-amber-800/40",
        }
      : variant === "success"
      ? {
          dot: "bg-emerald-400",
          label: "bg-emerald-500/10 text-emerald-300",
          ring: "ring-emerald-800/40",
        }
      : {
          dot: "bg-sky-400",
          label: "bg-sky-500/10 text-sky-300",
          ring: "ring-sky-800/40",
        };

  return (
    <div
      className={`mt-2 rounded-xl px-3 py-2 text-sm flex items-center gap-3 bg-neutral-900/70 border border-neutral-800 ring-1 ${styles.ring}`}
      role={variant === "error" ? "alert" : "status"}
      aria-live="polite"
    >
      <span className={`inline-flex items-center gap-1 px-2 py-0.5 rounded ${styles.label}`}>
        Status
      </span>
      <span className={`w-2 h-2 rounded-full ${styles.dot}`} />
      <span className="text-neutral-200/90">{text}</span>
    </div>
  );
}
</file>

<file path="src/lib/moduleInstall.ts">
import { ethers } from "ethers";
import { HeirSafeModuleFactoryABI } from "../abi/HeirSafeModuleFactory";
import { SafeABI } from "../abi/Safe";
import { SENTINEL } from "../abi/Safe";

export async function predictModuleForSafe(
  provider: ethers.Provider,
  factory: string,
  safe: string,
  saltHex: string
) {
  const f = new ethers.Contract(factory, HeirSafeModuleFactoryABI, provider);
  return (await f.predict(safe, saltHex)) as string;
}

export async function isDeployed(provider: ethers.Provider, addr: string) {
  const code = await provider.getCode(addr);
  return code && code !== "0x";
}

export async function isModuleEnabled(provider: ethers.Provider, safe: string, module: string) {
  const c = new ethers.Contract(safe, SafeABI, provider);
  let cursor = SENTINEL;
  const PAGE = 50n;
  while (true) {
    const [mods, next] = await c.getModulesPaginated(cursor, PAGE);
    if (mods.some((m: string) => m.toLowerCase() === module.toLowerCase())) return true;
    if (next === SENTINEL || mods.length === 0) return false;
    cursor = next;
  }
}

export function encodeEnableModule(module: string) {
  const iface = new ethers.Interface(SafeABI);
  return iface.encodeFunctionData("enableModule", [module]);
}

export function encodeFactoryDeploy(factory: string, safe: string, saltHex: string) {
  const iface = new ethers.Interface(HeirSafeModuleFactoryABI);
  return iface.encodeFunctionData("deploy", [safe, saltHex]);
}
</file>

<file path="src/lib/safeApp.ts">
import { useEffect, useState } from "react";
import { SafeAppProvider } from "@safe-global/safe-apps-provider";
import SafeAppsSDK from "@safe-global/safe-apps-sdk";
import type { SafeInfo } from "@safe-global/safe-apps-sdk"; // <-- type-only import

export function useSafeApp() {
  const [isSafeApp, setIsSafeApp] = useState(false);
  const [sdk, setSdk] = useState<SafeAppsSDK | null>(null);
  const [safe, setSafe] = useState<SafeInfo | null>(null);
  const [provider, setProvider] = useState<any>(null); // EIP-1193

  useEffect(() => {
    if (window.parent !== window) {
      const s = new SafeAppsSDK();
      setSdk(s);
      s.safe
        .getInfo()
        .then((info) => {
          setIsSafeApp(true);
          setSafe(info);
          setProvider(new SafeAppProvider(info, s));
        })
        .catch(() => setIsSafeApp(false));
    }
  }, []);

  return { isSafeApp, sdk, safe, provider };
}
</file>

<file path="src/lib/safeHelpers.ts">
import { ethers } from "ethers";
import { SafeABI, SENTINEL } from "../abi/Safe";

export async function getOwners(provider: ethers.Provider, safe: string) {
  const c = new ethers.Contract(safe, SafeABI, provider);
  return (await c.getOwners()) as string[];
}

export async function computePrevOwner(provider: ethers.Provider, safe: string, owner: string) {
  const owners = await getOwners(provider, safe);
  const i = owners.findIndex(o => o.toLowerCase() === owner.toLowerCase());
  if (i < 0) throw new Error("Owner not in Safe");
  return i === 0 ? ethers.ZeroAddress : owners[i - 1];
}

export async function isModuleEnabled(provider: ethers.Provider, safe: string, module: string) {
  const c = new ethers.Contract(safe, SafeABI, provider);
  let cursor = SENTINEL;
  const PAGE = 50n;
  while (true) {
    const [mods, next] = await c.getModulesPaginated(cursor, PAGE);
    if (mods.some((m: string) => m.toLowerCase() === module.toLowerCase())) return true;
    if (next === SENTINEL || mods.length === 0) return false;
    cursor = next;
  }
}

/** Encoded calldata to enable a module on the Safe (to paste into Safe’s Contract Interaction). */
export function buildEnableModuleCalldata(module: string) {
  const iface = new ethers.Interface(SafeABI);
  return iface.encodeFunctionData("enableModule", [module]);
}
</file>

<file path="src/wallet/ConnectButton.tsx">
import { useAccount, useConnect, useDisconnect, useChainId, useSwitchChain } from "wagmi";
import { sepolia } from "wagmi/chains";

export default function ConnectButton() {
  const { connectors, connect, status, error, variables } = useConnect();
  const { isConnected, address } = useAccount();
  const { disconnect } = useDisconnect();
  const chainId = useChainId();
  const { chains, switchChain } = useSwitchChain();

  if (isConnected) {
    return (
      <div className="flex items-center gap-2 text-sm">
        <span className="opacity-80">Wallet:</span>
        <span className="font-mono">{address}</span>
        <span className="opacity-80">Chain:</span>
        <span>{chains.find(c => c.id === chainId)?.name || chainId}</span>
        <button className="px-2 py-1 rounded bg-neutral-800 hover:bg-neutral-700"
                onClick={() => switchChain({ chainId: sepolia.id })}>
          Switch to Sepolia
        </button>
        <button className="px-2 py-1 rounded bg-neutral-800 hover:bg-neutral-700"
                onClick={() => disconnect()}>
          Disconnect
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-wrap gap-2">
      {connectors.map((c) => (
        <button key={c.uid}
          className="px-3 py-2 rounded bg-neutral-800 hover:bg-neutral-700"
          onClick={() => connect({ connector: c })}
          disabled={!c.ready || status === "pending"}>
          {c.name}{!c.ready ? " (unavailable)" : ""}
        </button>
      ))}
      {status === "pending" && <span className="text-xs opacity-70">Connecting… {variables?.connector?.name}</span>}
      {error && <span className="text-xs text-rose-400">{error.message}</span>}
    </div>
  );
}
</file>

<file path="src/wallet/WagmiProvider.tsx">
import { PropsWithChildren, useMemo } from "react";
import { WagmiProvider, createConfig, http } from "wagmi";
import { mainnet, sepolia, polygon, arbitrum, optimism, base, bsc } from "wagmi/chains";
import { injected, walletConnect, coinbaseWallet } from "@wagmi/connectors";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient();

export default function WalletRoot({ children }: PropsWithChildren) {
  const config = useMemo(() => createConfig({
    chains: [mainnet, sepolia, polygon, arbitrum, optimism, base, bsc],
    transports: {
      [mainnet.id]:  http(),
      [sepolia.id]:  http(import.meta.env.VITE_PUBLIC_RPC || "https://rpc.sepolia.org"),
      [polygon.id]:  http(),
      [arbitrum.id]: http(),
      [optimism.id]: http(),
      [base.id]:     http(),
      [bsc.id]:      http(),
    },
    connectors: [
      injected({ shimDisconnect: true }),                           // MetaMask/Rabby/Brave/etc.
      coinbaseWallet({ appName: "HeirSafeUI" }),                    // Coinbase Wallet
      walletConnect({ projectId: "b17c1d7d5e1c4d5c8e0d3b9b8a3e7f52" }) // replace with your WC projectId later
    ],
    multiInjectedProviderDiscovery: true,
    ssr: false,
  }), []);

  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/main.tsx">
import React from "react";
import ReactDOM from "react-dom/client";
import WalletRoot from "./wallet/WagmiProvider";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <WalletRoot>
      <App />
    </WalletRoot>
  </React.StrictMode>
);
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="postcss.config.js">
// postcss.config.js
export default {
  plugins: {
    "@tailwindcss/postcss": {},
    // autoprefixer is optional; add it if you want
    // autoprefixer: {},
  },
};
</file>

<file path="tailwind.config.js">
export default {
  content: ["./index.html", "./src/**/*.{ts,tsx}"],
  theme: { extend: {} },
  plugins: [],
};
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="public/favicon.svg">
<!-- Favicon (bigger, centered heart) -->
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <defs>
    <linearGradient id="hs-g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0" stop-color="#10b981"/>
      <stop offset="1" stop-color="#059669"/>
    </linearGradient>
  </defs>

  <!-- shield -->
  <path d="M32 6l18 5v14c0 12-7.5 22.5-18 25.6C21.5 47.5 14 37 14 25V11l18-5z" fill="url(#hs-g)"/>

  <!-- heart: scale up around (32,32), then nudge up 4px -->
  <path
    transform="translate(0,-4) translate(32,32) scale(1.32) translate(-32,-32)"
    d="M32 40s-7.5-4.5-7.5-10.2a4.2 4.2 0 0 1 7.5-2.5 4.2 4.2 0 0 1 7.5 2.5C39.5 35.5 32 40 32 40z"
    fill="#0a0a0a" opacity=".9"/>
</svg>
</file>

<file path="public/safari-pinned-tab.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <path d="M32 4l20 6v16c0 13-8.3 24.6-20 28-11.7-3.4-20-15-20-28V10l20-6zM32 42s-9-5.3-9-12a5 5 0 0 1 9-3 5 5 0 0 1 9 3c0 6.7-9 12-9 12z" fill="#000"/>
</svg>
</file>

<file path="src/abi/HeirSafeModule.ts">
export const HeirSafeModuleABI = [
  "function avatar() view returns (address)",
  "function heirConfigs(address) view returns (address beneficiary, uint256 activationTime)",
  "function setBeneficiary(address beneficiary, uint256 activationTime)",
  "function setActivationTime(uint256 newActivationTime)",
  "function claimSafe(address owner, address prevOwner)",
  "function removeBeneficiary()", 
  "event BeneficiarySet(address indexed owner, address indexed beneficiary)",
  "event ActivationTimeSet(address indexed owner, uint256 activationTime)"
] as const;
</file>

<file path="src/components/NetworkSwitcher.tsx">
// src/components/NetworkSwitcher.tsx
import { useEffect, useMemo, useState } from "react";
import { ethers } from "ethers";
import { useSafeApp } from "../lib/safeApp";
import { CHAINS, SUPPORTED_CHAIN_IDS } from "../config/chains";

export default function NetworkSwitcher() {
  const { isSafeApp, provider: safeEip1193 } = useSafeApp();

  // pick the live provider (Safe iframe or injected wallet)
  const readProvider = useMemo(() => {
    if (safeEip1193) return new ethers.BrowserProvider(safeEip1193 as any);
    const eth = (window as any).ethereum;
    return eth ? new ethers.BrowserProvider(eth) : null;
  }, [safeEip1193]);

  const [chainId, setChainId] = useState<number | null>(null);
  const currentLabel =
    chainId != null && CHAINS[chainId] ? CHAINS[chainId].name : "Unknown";

  // keep chainId in sync
  useEffect(() => {
    let cleanup = () => {};
    (async () => {
      if (!readProvider) {
        setChainId(null);
        return;
      }
      const net = await (readProvider as any).getNetwork();
      setChainId(Number(net.chainId));

      // listen to wallet chain changes (only works on injected providers)
      const eth = (window as any).ethereum;
      if (eth && !safeEip1193) {
        const handler = (cidHex: string) => {
          try {
            setChainId(parseInt(cidHex, 16));
          } catch {}
        };
        eth.on?.("chainChanged", handler);
        cleanup = () => eth.removeListener?.("chainChanged", handler);
      }
    })();
    return cleanup;
  }, [readProvider, safeEip1193]);

  async function switchTo(target: number) {
    const eth = (window as any).ethereum;
    if (!eth) return alert("No injected wallet found to switch networks.");

    if (chainId === target) return;

    const targetCfg = CHAINS[target];
    const targetHex = ethers.toBeHex(target);

    try {
      await eth.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: targetHex }],
      });
    } catch (err: any) {
      // 4902 = chain not added to wallet
      if (err?.code === 4902 && targetCfg?.addChainParams) {
        try {
          await eth.request({
            method: "wallet_addEthereumChain",
            params: [targetCfg.addChainParams],
          });
        } catch (e: any) {
          console.error("wallet_addEthereumChain failed:", e);
          alert(e?.message || "Failed to add chain to wallet.");
        }
      } else {
        console.error("wallet_switchEthereumChain failed:", err);
        alert(err?.message || "Failed to switch network.");
      }
    }
  }

  // In Safe App: show a read-only pill
  if (isSafeApp) {
    return (
      <div
        className="px-3 h-9 inline-flex items-center rounded bg-neutral-800 text-sm"
        title="Network is controlled by the Safe App host"
      >
        {currentLabel}
      </div>
    );
  }

  // Standalone: dropdown with configured chains
  return (
    <select
      className="h-9 rounded bg-neutral-800 px-3 text-sm"
      value={chainId ?? ""}
      onChange={(e) => switchTo(Number(e.target.value))}
    >
      {chainId == null && <option value="">Select network</option>}
      {SUPPORTED_CHAIN_IDS.map((id) => (
        <option key={id} value={id}>
          {CHAINS[id].name}
        </option>
      ))}
    </select>
  );
}
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.patch
.env
</file>

<file path="src/components/AppHeader.tsx">
import NetworkSwitcher from "./NetworkSwitcher";
import { ConnectButton } from "./ConnectButton";
import Address from "./Address";
import Logo from "./Logo";

export default function AppHeader({
  safeAddr,
  walletAddr,
}: {
  safeAddr: string;
  walletAddr?: string;
}) {
  return (
    <nav className="sticky top-0 z-50 border-b border-neutral-800 bg-neutral-950/70 backdrop-blur supports-[backdrop-filter]:bg-neutral-950/60">
      <div className="max-w-5xl mx-auto h-14 px-4 flex items-center justify-between">
        <div className="flex items-center gap-1">
          <img
            src="/logo-heirsafe.svg"
            alt="HeirSafe"
            className="h-7 w-7 md:h-8 md:w-8 drop-shadow-sm"
          />
          <span className="font-semibold tracking-tight">HeirSafe</span>
          {safeAddr && <Address addr={safeAddr} />}
        </div>
        <div className="flex items-center gap-3">
          <NetworkSwitcher />
          {/* wallet address pill (hide if unknown) */}
          {walletAddr ? <Address addr={walletAddr} /> : null}
          <ConnectButton />
        </div>
      </div>
    </nav>
  );
}
</file>

<file path="src/components/InstallModule.tsx">
import { useState } from "react";
import { ethers } from "ethers";
import { useSafeApp } from "../lib/safeApp";
import Address from "./Address";
import { HeirSafeModuleFactoryABI } from "../abi/HeirSafeModuleFactory";

type Props = {
  safeAddr: string;
  factoryAddr: string;
  predictedModule: string;
  readProvider: ethers.Provider;
  isDeployed: boolean;
  isEnabled: boolean;
  onChanged?: () => Promise<void> | void;
};

const SafeABI = [
  "function getThreshold() view returns (uint256)",
  "function isOwner(address) view returns (bool)",
  "function getNonce() view returns (uint256)",
  "function getTransactionHash(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 _nonce) view returns (bytes32)",
  "function execTransaction(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,bytes signatures) returns (bool)",
];

export default function InstallModule({
  safeAddr,
  factoryAddr,
  predictedModule,
  readProvider,
  isDeployed,
  isEnabled,
  onChanged,
}: Props) {
  const { isSafeApp, sdk } = useSafeApp();
  const [busy, setBusy] = useState(false);
  const [instructions, setInstructions] = useState<string>("");

  const saltHex =
    (import.meta.env.VITE_INSTALL_SALT as string) || "0x" + "00".repeat(32);

  // --------- helpers ---------

  async function getChainPrefix(): Promise<string> {
    try {
      const net = await readProvider.getNetwork();
      const id = Number(net.chainId);
      // minimal mapping (extend as you add chains)
      if (id === 1) return "eth:";
      if (id === 11155111) return "sep:";
      return `${id}:`;
    } catch {
      return "";
    }
  }

  async function openSafe() {
    const pref = await getChainPrefix();
    const url = `https://app.safe.global/home?safe=${pref}${safeAddr}`;
    window.open(url, "_blank", "noopener,noreferrer");
  }

  async function readThreshold(): Promise<number> {
    const safe = new ethers.Contract(safeAddr, SafeABI, readProvider as any);
    const t = await safe.getThreshold();
    return Number(t);
  }

  async function signerAndIsOwner(): Promise<{
    signer: ethers.Signer;
    signerAddr: string;
    isOwner: boolean;
  }> {
    const eth = (window as any).ethereum;
    if (!eth) throw new Error("No wallet detected");
    const bp = new ethers.BrowserProvider(eth);
    const signer = await bp.getSigner();
    const signerAddr = await signer.getAddress();
    const safe = new ethers.Contract(safeAddr, SafeABI, readProvider as any);
    const yes = await safe.isOwner(signerAddr);
    return { signer, signerAddr, isOwner: yes };
  }

  // --------- SAFE APP (iframe) ---------

  async function installInsideSafe() {
    if (!sdk) return;
    setBusy(true);
    try {
      // Encode the correct factory function from your ABI
      const iface = new ethers.Interface(HeirSafeModuleFactoryABI);
      let data: string;
      try {
        iface.getFunction("deployForSafe");
        data = iface.encodeFunctionData("deployForSafe", [safeAddr, saltHex]);
      } catch {
        iface.getFunction("deploy");
        data = iface.encodeFunctionData("deploy", [safeAddr, saltHex]);
      }

      await sdk.txs.send({
        txs: [
          {
            to: factoryAddr,
            value: "0",
            data,
          },
        ],
      });
      await Promise.resolve(onChanged?.());
    } finally {
      setBusy(false);
    }
  }

  async function enableInsideSafeOnly() {
    if (!sdk) return;
    setBusy(true);
    try {
      const iface = new ethers.Interface(["function enableModule(address)"]);
      const data = iface.encodeFunctionData("enableModule", [predictedModule]);
      await sdk.txs.send({
        txs: [
          {
            to: safeAddr,
            value: "0",
            data,
          },
        ],
      });
      await Promise.resolve(onChanged?.());
    } finally {
      setBusy(false);
    }
  }

  // --------- STANDALONE (normal website) ---------

  // Deploy:
  // - threshold > 1 → instruct to do it from Safe UI (multisig)
  // - threshold == 1 → one-click deploy from wallet (permissionless)
  async function deployStandalone() {
    try {
      if (!ethers.isAddress(factoryAddr)) throw new Error("Bad factory");
      if (!ethers.isAddress(safeAddr)) throw new Error("Bad safe");
      if (!/^0x[0-9a-fA-F]{64}$/.test(saltHex)) {
        throw new Error("VITE_INSTALL_SALT must be 0x + 64 hex chars");
      }

      const t = await readThreshold();
      if (t > 1) {
        const pref = await getChainPrefix();
        setInstructions(
          [
            "Deploy requires a Safe transaction:",
            "1) Open Safe UI → New transaction → Contract interaction.",
            `2) Contract: ${factoryAddr}`,
            "3) Function: deployForSafe(address, bytes32) (or deploy(address, bytes32))",
            `4) Params:\n   - safe = ${safeAddr}\n   - salt = ${saltHex}`,
            `5) Review and submit. Collect required signatures (${t}-of-owners).\n`,
            `Safe link: https://app.safe.global/home?safe=${pref}${safeAddr}`,
          ].join("\n")
        );
        return;
      }

      // don’t try to deploy if code already exists at predicted
      const code = await (readProvider as any).getCode(predictedModule);
      if (code && code !== "0x") {
        alert("Module already deployed at the predicted address.");
        return;
      }

      const { signer } = await signerAndIsOwner();

      // call the factory directly using your ABI
      const factory = new ethers.Contract(
        factoryAddr,
        HeirSafeModuleFactoryABI,
        signer
      );

      let tx;
      try {
        factory.interface.getFunction("deployForSafe");
        tx = await factory.deployForSafe(safeAddr, saltHex);
      } catch {
        factory.interface.getFunction("deploy");
        tx = await factory.deploy(safeAddr, saltHex);
      }

      await tx.wait();
      await onChanged?.();
    } catch (e: any) {
      alert(e?.reason || e?.message || String(e));
    }
  }

  // Enable:
  // - threshold > 1 or not owner → show Safe UI instructions
  // - threshold == 1 and signer is owner → build & execute Safe tx locally
  async function enableStandaloneSmart() {
    setBusy(true);
    try {
      const t = await readThreshold();
      const { signer, signerAddr, isOwner } = await signerAndIsOwner();

      if (t !== 1 || !isOwner) {
        const pref = await getChainPrefix();
        setInstructions(
          [
            "Enable requires a Safe transaction:",
            "1) Open Safe UI → New transaction → Contract interaction.",
            `2) Contract: ${safeAddr}`,
            "3) Function: enableModule(address)",
            `4) Param: module = ${predictedModule}`,
            `5) Review and submit. Collect required signatures (${t}-of-owners).\n`,
            `You are connected as ${signerAddr}${!isOwner ? " (not a Safe owner)" : ""}.`,
            `Safe link: https://app.safe.global/home?safe=${pref}${safeAddr}`,
          ].join("\n")
        );
        return;
      }

      // threshold == 1 and signer is owner → execute Safe tx directly
      const safeRead = new ethers.Contract(safeAddr, SafeABI, readProvider);
      const safeWrite = new ethers.Contract(safeAddr, SafeABI, signer);

      const enableIface = new ethers.Interface([
        "function enableModule(address)",
      ]);
      const data = enableIface.encodeFunctionData("enableModule", [
        predictedModule,
      ]);

      const to = safeAddr;
      const value = 0;
      const operation = 0; // CALL
      const safeTxGas = 0;
      const baseGas = 0;
      const gasPrice = 0;
      const gasToken = ethers.ZeroAddress;
      const refundReceiver = ethers.ZeroAddress;
      const nonce = await safeRead.getNonce();

      // Safe’s on-chain hash (works for v1.3.x)
      const txHash = await safeRead.getTransactionHash(
        to,
        value,
        data,
        operation,
        safeTxGas,
        baseGas,
        gasPrice,
        gasToken,
        refundReceiver,
        nonce
      );

      // ECDSA sign the hash
      const sig = await signer.signMessage(ethers.getBytes(txHash));

      // Execute
      const tx = await safeWrite.execTransaction(
        to,
        value,
        data,
        operation,
        safeTxGas,
        baseGas,
        gasPrice,
        gasToken,
        refundReceiver,
        sig
      );
      await tx.wait();
      await onChanged?.();
    } catch (e: any) {
      alert(e?.reason || e?.message || String(e));
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="p-3 rounded-xl bg-amber-950/40 border border-amber-800/40 text-amber-200 text-sm space-y-3">
      <div className="space-y-1 text-xs text-neutral-300">
        <div className="flex items-center gap-2">
          <span className="opacity-70">Factory:</span>
          <Address addr={factoryAddr} />
        </div>
        <div className="flex items-center gap-2">
          <span className="opacity-70">Predicted module:</span>
          <Address addr={predictedModule} />
        </div>
      </div>

      {isSafeApp ? (
        <div className="flex flex-col gap-2">
          {!isDeployed && !isEnabled && (
            <button
              className="px-3 py-2 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
              onClick={installInsideSafe}
              disabled={busy}
            >
              {busy ? "Submitting…" : "Install module to this Safe"}
            </button>
          )}
          {isDeployed && !isEnabled && (
            <button
              className="px-3 py-2 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
              onClick={enableInsideSafeOnly}
              disabled={busy}
            >
              {busy ? "Submitting…" : "Enable module"}
            </button>
          )}
        </div>
      ) : (
        <div className="flex flex-col gap-2">
          {!isDeployed && !isEnabled && (
            <button
              className="px-3 py-2 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
              onClick={deployStandalone}
              disabled={busy}
            >
              {busy ? "Deploying…" : "Deploy module instance"}
            </button>
          )}

          {isDeployed && !isEnabled && (
            <>
              <button
                className="px-3 py-2 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
                onClick={enableStandaloneSmart}
                disabled={busy}
              >
                {busy ? "Working…" : "Enable module"}
              </button>

              <div className="flex gap-2 items-center">
                <button
                  className="px-3 py-2 rounded bg-neutral-800 hover:bg-neutral-700"
                  onClick={openSafe}
                  title="Open your Safe to deploy/enable from the UI."
                >
                  Open Safe UI
                </button>
              </div>

              {!!instructions && (
                <pre className="whitespace-pre-wrap text-amber-200/90 bg-amber-900/30 p-2 rounded">
                  {instructions}
                </pre>
              )}
            </>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/config/chains.ts">
// src/config/chains.ts
export type AddEthereumChainParameter = {
  chainId: `0x${string}`;
  chainName: string;
  nativeCurrency: { name: string; symbol: string; decimals: number };
  rpcUrls: string[];
  blockExplorerUrls?: string[];
};

export type ChainConfig = {
  id: number;
  name: string;
  factory: string; // your HeirSafe factory per chain
  txService?: string; // Safe Tx Service base URL (optional)
  addChainParams?: AddEthereumChainParameter; // for wallet_addEthereumChain
};

export const CHAINS: Record<number, ChainConfig> = {
  11155111: {
    id: 11155111,
    name: "Sepolia (test)",
    factory: "0xE83e2d2abE267741c261f7749A97BA4CE2A63603",
    txService: "https://safe-transaction-sepolia.safe.global",
    addChainParams: {
      chainId: "0xaa36a7",
      chainName: "Sepolia",
      nativeCurrency: { name: "Sepolia ETH", symbol: "ETH", decimals: 18 },
      rpcUrls: ["https://rpc.sepolia.org", "https://sepolia.drpc.org"],
      blockExplorerUrls: ["https://sepolia.etherscan.io"],
    },
  },
  // Add more networks as you deploy:
  // 1: { ... }, 8453: { ... }, 42161: { ... }, etc.
};

export function getFactoryAddress(chainId: number): string | null {
  const a = CHAINS[chainId]?.factory;
  return a ? a.trim() : null;
}

export function getTxServiceUrl(chainId: number): string | null {
  return CHAINS[chainId]?.txService ?? null;
}
export const SUPPORTED_CHAIN_IDS = Object.keys(CHAINS).map((x) => Number(x));
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>HeirSafe — Safe inheritance module</title>
    <meta name="description"
      content="HeirSafe lets Safe owners set beneficiaries and activation times so heirs can claim ownership when the time comes." />
    <meta name="theme-color" content="#111827" />
    <meta name="color-scheme" content="dark light" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg?v=3" />
    <link rel="alternate icon" href="/favicon.ico?v=3" sizes="any" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png?v=3" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg?v=3" color="#10b981" />
    <link rel="manifest" href="/site.webmanifest?v=3" />
  </head>
  <body>
    <div id="root"></div>
    <!-- Vite will rewrite this to the built file in /assets for production -->
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "heirsafe-ui-temp",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "deploy": "dotenv -e .env -- sh -c 'npm run build && scp -rC dist/* \"$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH\"'"
  },
  "dependencies": {
    "@safe-global/safe-apps-provider": "^0.18.6",
    "@safe-global/safe-apps-sdk": "^9.1.0",
    "@tanstack/react-query": "^5.84.2",
    "@wagmi/connectors": "^5.9.2",
    "@walletconnect/ethereum-provider": "^2.21.7",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "viem": "^2.33.3",
    "wagmi": "^2.16.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/postcss": "^4.1.11",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^4.7.0",
    "dotenv-cli": "^10.0.0",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.0",
    "vite": "^7.1.0"
  }
}
</file>

<file path="src/index.css">
@import "tailwindcss";

/* Global */
html, body, #root { height: 100%; }
body { @apply bg-neutral-950 text-neutral-100 antialiased; }

/* Reusable cards/buttons/table */
.card { @apply p-5 rounded-2xl bg-neutral-900/70 border border-neutral-800; }

.btn { @apply px-3 py-2 rounded disabled:opacity-50; }
.btn-primary   { @apply bg-emerald-700 hover:bg-emerald-600; }
.btn-secondary { @apply bg-neutral-800 hover:bg-neutral-700; }
.btn-info      { @apply bg-sky-700 hover:bg-sky-600; }
.btn-danger    { @apply bg-rose-700 hover:bg-rose-600; }

.table { @apply min-w-full text-sm; }
.table thead th { @apply py-2 pr-4 font-medium text-neutral-300; }
.table tbody td { @apply py-2 pr-4; }
.table tr { @apply border-t border-neutral-800/70; }

input[type="text"],
input[type="datetime-local"] { @apply px-3 py-2 rounded bg-neutral-800; }

/* Small code/kbd styling if you show hashes/addresses */
code { @apply px-1.5 py-0.5 rounded bg-neutral-800/80 text-neutral-200; }

/* ---------- HeirSafe background ---------- */
.hs-backdrop{
  position:fixed;
  inset:0;
  pointer-events:none;
  z-index:0;                      /* keep under main content */
  display:grid;
  place-items:center;
  overflow:clip;

  /* base radial glow behind everything */
  background:
    radial-gradient(1200px 800px at 50% 60%, rgba(16,185,129,0.06), transparent 60%),
    radial-gradient(900px 600px at 40% 30%, rgba(59,130,246,0.05), transparent 70%);
}

/* animated aurora layer (behind the logo) */
.hs-backdrop::before{
  content:"";
  position:absolute;
  inset:-20%;
  background:
    conic-gradient(from 0deg at 50% 50%,
      rgba(16,185,129,0.25),
      rgba(59,130,246,0.18),
      rgba(236,72,153,0.15),
      rgba(16,185,129,0.25));
  filter: blur(80px) saturate(120%);
  opacity: 0.2;
  transform-origin: 50% 55%;
  animation: hs-aurora 40s ease-in-out infinite alternate;
}

/* subtle vignette at edges */
.hs-backdrop::after{
  content:"";
  position:absolute;
  inset:-2vmin;
  background:
    radial-gradient(1000px 700px at 50% 60%, rgba(0,0,0,0) 0%, rgba(0,0,0,0.25) 70%, rgba(0,0,0,0.45) 100%);
  mix-blend-mode: multiply;
  pointer-events:none;
}

/* the logo itself (keep your previous settings) */
.hs-backdrop__logo{
  width: clamp(420px, 50vw, 760px);
  opacity: 0.12;
  filter: blur(0.3px) drop-shadow(0 10px 30px rgba(16,185,129,.25));
  animation: hs-swing 60s ease-in-out infinite;
  transform-origin: 50% 46%;
  will-change: transform;
}

/* your preferred swing */
@keyframes hs-swing{
  0%,100% { transform: rotate(0deg) scale(1.6); }
  25%     { transform: rotate(-33deg) scale(1.9); }
  50%     { transform: rotate(0deg) scale(1.6); }
  75%     { transform: rotate(33deg) scale(1.9); }
}

/* slow, gentle drift of the aurora gradient */
@keyframes hs-aurora{
  0%   { transform: rotate(-10deg) scale(1.0); opacity: 0.18; }
  50%  { transform: rotate( 12deg) scale(1.08); opacity: 0.24; }
  100% { transform: rotate(-10deg) scale(1.0); opacity: 0.18; }
}

/* Noise overlay inside the backdrop */
.hs-backdrop .hs-noise{
  position: absolute;
  inset: 0;
  pointer-events: none;
  mix-blend-mode: overlay;
  opacity: .24;

  /* tile the SVG noise */
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cfilter id='n'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23n)' opacity='0.18'/%3E%3C/svg%3E");
  background-repeat: repeat;
  background-size: 220px 220px; /* tweak grain density */
}


@media (prefers-reduced-motion: reduce){
  .hs-backdrop__logo{ animation: none; }
  .hs-backdrop::before{ animation: none; }
}
</file>

<file path="README.md">
# HeirSafe UI

A minimal, professional web UI for the **HeirSafe** Safe module.

- 🧩 **HeirSafe Module**: lets each Safe owner set a **beneficiary** and an **activation time**. After that time, the beneficiary can **claim** and replace that owner’s address. No funds move; only the owner address changes.
- 🔗 Module repo: https://github.com/AlexNa-Holdings/heirsafe-module  
- 🔗 UI repo: https://github.com/AlexNa-Holdings/heirsafe-ui

---

## Features

- **Install / Enable Module**
  - Predicts the module address from factory + salt
  - Checks deployment & enablement
  - If Safe threshold is **1** and you’re an owner, prepares and sends the **Enable Module** tx directly
  - Otherwise shows clear, copy-ready steps and an “Open Safe UI” shortcut
- **Owners & Heirs (inline)**
  - Per owner: **set beneficiary + activation**, **prolong**, **remove**
  - Local datetime picker → stored on-chain as **UTC seconds**
  - Live **countdown** (Local + UTC + “ready in / since …”)
  - If your connected address is a configured beneficiary and time has passed, you’ll see **Claim**
- **Nice UX**
  - Short, copyable addresses (`0x1234…abcd`) with tooltip and non-reflow “Copied” bubble
  - Calm **Status** bar (info/warn/error/success)
  - Remembers your last Safe (`localStorage`)
  - Collapsible “What is the HeirSafe module?” intro (remembers state)
  - Tasteful animated background/logo; respects `prefers-reduced-motion`
  - Tailwind CSS styling

---

## Configuration

Create `.env.local`:

```ini
# Optional: pre-fill the Safe address input
VITE_DEFAULT_SAFE=0xYourSafeAddress

# Required: 32-byte salt to deterministically predict the module address
# Must be 0x + 64 hex characters
VITE_INSTALL_SALT=0x0000000000000000000000000000000000000000000000000000000000000000
```

> The factory address per chain is configured in code at `src/config/chains.ts`.

---

## How It Works (high level)

* **Predict**: compute the deterministic module address from `factory + safe + salt`.
* **Check**: read code at the predicted address; inspect Safe’s enabled modules.
* **Enable**:

  * If `threshold === 1` and you are an owner, the app builds and sends the enable tx to your wallet.
  * Otherwise, it shows Safe UI instructions and a shortcut button.
* **Owners table**:

  * Reads Safe owners.
  * Reads `heirConfigs(owner)` (beneficiary, activationTime) from the module.
  * Inline actions sign with your **EOA** (outside Safe App embedding).

---


## Development Notes

* **Tailwind CSS (PostCSS)**
  If you see: “It looks like you're trying to use `tailwindcss` directly as a PostCSS plugin…”, install and configure:

  ```bash
  pnpm add -D @tailwindcss/postcss
  ```

  And ensure your PostCSS config uses `@tailwindcss/postcss`.

* **Accessibility**
  Background animations respect `prefers-reduced-motion`.

---

## Troubleshooting

* **“Factory not configured for chain X”**
  Add/update the factory address in `src/config/chains.ts`.

* **“Factory not deployed on this network”**
  The configured factory address has no bytecode on the active chain—fix the address or switch networks.

* **Enable flow didn’t auto-send**
  Auto-send only when **threshold = 1** and your connected wallet is a Safe owner; otherwise follow the provided Safe UI steps.

---

## Contributing

PRs welcome! Please keep changes focused and consistent with the existing style (TypeScript, Tailwind). If you add networks, update `src/config/chains.ts` carefully.

---

## License

**GNU General Public License v3.0** — see [LICENSE](./LICENSE).

---

## Author

**Written by [Alex Na](https://x.com/AlexNa)**

* Module: [https://github.com/AlexNa-Holdings/heirsafe-module](https://github.com/AlexNa-Holdings/heirsafe-module)
* UI: [https://github.com/AlexNa-Holdings/heirsafe-ui](https://github.com/AlexNa-Holdings/heirsafe-ui)

*(Optional) Built with assistance from GPT-5 Thinking.*

```
::contentReference[oaicite:0]{index=0}
</file>

<file path="src/App.tsx">
import { useEffect, useMemo, useState } from "react";
import { ethers } from "ethers";
import "./index.css";

// UI
import { ConnectButton } from "./components/ConnectButton";
import InstallModule from "./components/InstallModule";

// ABIs & helpers
import { HeirSafeModuleABI } from "./abi/HeirSafeModule";
import { useSafeApp } from "./lib/safeApp";
import { getOwners, computePrevOwner } from "./lib/safeHelpers";
import NetworkSwitcher from "./components/NetworkSwitcher";
import { CHAINS, getFactoryAddress } from "./config/chains";
import Address from "./components/Address";
import AppHeader from "./components/AppHeader";
import AppFooter from "./components/AppFooter";
import ModuleIntro from "./components/ModuleIntro";
import BackgroundArt from "./components/BackgroundArt";
import StatusBar from "./components/StatusBar";

import {
  predictModuleForSafe,
  isDeployed as codeExists,
  isModuleEnabled as checkEnabled,
} from "./lib/moduleInstall";

// env
const DEFAULT_SAFE = (import.meta.env.VITE_DEFAULT_SAFE || "").trim();
const LS_SAFE_KEY = "heirsafe:lastSafe";

export default function App() {
  // Safe App context (iframe)
  const { isSafeApp, safe, provider: safeEip1193 } = useSafeApp();

  // build a read provider ONLY from in-page providers:
  // 1) Safe App provider (always available when embedded)
  // 2) injected wallet (after the user connects)
  const [injected, setInjected] = useState<ethers.BrowserProvider | null>(null);
  useEffect(() => {
    const eth = (window as any).ethereum;
    if (eth) setInjected(new ethers.BrowserProvider(eth));
  }, []);
  // pick a default chain for public read (use the one you host on)
  const DEFAULT_CHAIN_ID = 11155111; // Sepolia (adjust if needed)
  const FALLBACK_RPC = CHAINS[DEFAULT_CHAIN_ID]?.rpcUrls?.[0];

  const readProvider = useMemo(() => {
    if (safeEip1193) return new ethers.BrowserProvider(safeEip1193 as any);
    if (injected) return injected;
    // ✅ public read-only provider so tables/labels still load
    if (FALLBACK_RPC)
      return new ethers.JsonRpcProvider(FALLBACK_RPC, DEFAULT_CHAIN_ID);
    return null;
  }, [safeEip1193, injected]);

  // Safe address (autofill if embedded)
  const [safeAddr, setSafeAddr] = useState<string>(() => {
    try {
      const fromLS = localStorage.getItem(LS_SAFE_KEY)?.trim() || "";
      return (fromLS || DEFAULT_SAFE).trim();
    } catch {
      return DEFAULT_SAFE;
    }
  });

  // predicted module + state
  const [predicted, setPredicted] = useState<string>("");
  const [deployed, setDeployed] = useState<boolean | null>(null);
  const [enabled, setEnabled] = useState<boolean | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);

  // owners list + status messages
  const [owners, setOwners] = useState<string[]>([]);
  const [status, setStatus] = useState<string>("");

  // owner actions (EOA)
  const [beneficiary, setBeneficiary] = useState<string>("");
  const [activation, setActivation] = useState<string>("");

  // beneficiary claim
  const [ownerForClaim, setOwnerForClaim] = useState<string>("");

  // derive chainId from the active readProvider
  useEffect(() => {
    (async () => {
      if (!readProvider) {
        setChainId(null);
        return;
      }
      const net = await (readProvider as any).getNetwork();
      setChainId(Number(net.chainId));
    })();
  }, [readProvider]);

  const factoryFromChain = chainId != null ? getFactoryAddress(chainId) : null;
  const normalizedFactory = factoryFromChain?.trim() || null; // 👈 add this
  const readyForChain = chainId !== null && !!normalizedFactory; // 👈 use this

  // default Safe from Safe App context
  useEffect(() => {
    if (isSafeApp && safe?.safeAddress) {
      setSafeAddr(safe.safeAddress);
      try {
        localStorage.setItem(LS_SAFE_KEY, safe.safeAddress);
      } catch {}
    }
  }, [isSafeApp, safe]);

  useEffect(() => {
    try {
      if (ethers.isAddress(safeAddr)) {
        localStorage.setItem(LS_SAFE_KEY, safeAddr);
      }
    } catch {}
  }, [safeAddr]);

  async function refreshOwners() {
    if (!ethers.isAddress(safeAddr) || !readProvider) {
      setOwners([]);
      return;
    }
    const list = await getOwners(readProvider as any, safeAddr);
    setOwners(list);
  }

  async function refreshInstallState() {
    setStatus("Checking module…");
    if (!ethers.isAddress(safeAddr))
      throw new Error("Enter a valid Safe address");
    if (!readProvider)
      throw new Error("Connect a wallet or open inside Safe to continue");
    if (chainId == null) throw new Error("Unknown network");
    if (!normalizedFactory || !ethers.isAddress(normalizedFactory)) {
      throw new Error(`Factory not configured for chain ${chainId}`);
    }
    try {
      if (!ethers.isAddress(safeAddr))
        throw new Error("Enter a valid Safe address");
      if (!readProvider)
        throw new Error("Connect a wallet or open inside Safe to continue");

      const saltHex =
        (import.meta.env.VITE_INSTALL_SALT as string) || "0x" + "00".repeat(32);
      if (!/^0x[0-9a-fA-F]{64}$/.test(saltHex)) {
        throw new Error("VITE_INSTALL_SALT must be 0x + 64 hex chars");
      }

      // ensure the factory exists on this chain
      const code = await (readProvider as any).getCode(normalizedFactory);
      if (!code || code === "0x")
        throw new Error("Factory not deployed on this network");

      const addr = await predictModuleForSafe(
        readProvider as any,
        normalizedFactory,
        safeAddr,
        saltHex
      );
      setPredicted(addr);
      const hasCode = await codeExists(readProvider as any, addr);
      setDeployed(Boolean(hasCode));
      const en = hasCode
        ? await checkEnabled(readProvider as any, safeAddr, addr)
        : false;
      setEnabled(en);
      setStatus(
        en
          ? "Module installed"
          : hasCode
          ? "Module deployed, not enabled"
          : "Module not deployed"
      );
    } catch (e: any) {
      setPredicted("");
      setDeployed(null);
      setEnabled(null);
      setStatus(`Error: ${e?.message || String(e)}`);
      console.error("refreshInstallState error:", e);
    }
  }

  useEffect(() => {
    if (!readProvider || !readyForChain) return;
    (async () => {
      await refreshInstallState();
      await refreshOwners();
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [safeAddr, readProvider, readyForChain]);

  // ---------------- owner actions (sign with injected wallet; disabled in Safe App) ----------------
  async function doSetBeneficiary() {
    try {
      if (!ethers.isAddress(predicted)) throw new Error("Module not ready");
      if (isSafeApp)
        throw new Error("Open standalone site to sign with wallet");
      if (!ethers.isAddress(beneficiary))
        throw new Error("Invalid beneficiary");
      const ts = Number(activation);
      if (!ts || ts <= Math.floor(Date.now() / 1000))
        throw new Error("Activation must be a future unix timestamp");

      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      const mod = new ethers.Contract(predicted, HeirSafeModuleABI, signer);
      const tx = await mod.setBeneficiary(beneficiary, ts);
      setStatus("setBeneficiary sent…");
      await tx.wait();
      setStatus("setBeneficiary confirmed");
    } catch (e: any) {
      setStatus(`Error: ${e?.reason || e?.message || String(e)}`);
    }
  }

  async function doSetTime() {
    try {
      if (!ethers.isAddress(predicted)) throw new Error("Module not ready");
      if (isSafeApp)
        throw new Error("Open standalone site to sign with wallet");
      const ts = Number(activation);
      if (!ts || ts <= Math.floor(Date.now() / 1000))
        throw new Error("Activation must be a future unix timestamp");

      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      const mod = new ethers.Contract(predicted, HeirSafeModuleABI, signer);
      const tx = await mod.setActivationTime(ts);
      setStatus("setActivationTime sent…");
      await tx.wait();
      setStatus("setActivationTime confirmed");
    } catch (e: any) {
      setStatus(`Error: ${e?.reason || e?.message || String(e)}`);
    }
  }

  async function doClaim() {
    try {
      if (!ethers.isAddress(predicted)) throw new Error("Module not ready");
      if (isSafeApp)
        throw new Error("Open standalone site to sign with wallet");
      if (!ethers.isAddress(ownerForClaim))
        throw new Error("Invalid owner address");

      const prev = await computePrevOwner(
        readProvider as any,
        safeAddr,
        ownerForClaim
      );
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      const mod = new ethers.Contract(predicted, HeirSafeModuleABI, signer);
      const tx = await mod.claimSafe(ownerForClaim, prev);
      setStatus("claimSafe sent…");
      await tx.wait();
      setStatus("claimSafe confirmed");
      await refreshOwners();
    } catch (e: any) {
      setStatus(`Error: ${e?.reason || e?.message || String(e)}`);
    }
  }

  return (
    <div className="relative min-h-screen bg-neutral-950 text-neutral-100">
      {/* Background: heart-on-shield */}
      <div className="hs-backdrop" aria-hidden="true">
        <img src="/logo-heirsafe.svg" alt="" className="hs-backdrop__logo" />
        <div className="hs-noise" />
      </div>
      <main className="relative z-10 max-w-5xl mx-auto p-6 space-y-6">
        <AppHeader safeAddr={safeAddr} />
        <ModuleIntro />

        {/* Configuration */}
        <section className="p-5 rounded-2xl bg-neutral-900/70 border border-neutral-800 space-y-3">
          <h2 className="font-medium">Configuration</h2>
          <div className="grid gap-2 md:grid-cols-2">
            <input
              className="px-3 py-2 rounded bg-neutral-800"
              placeholder="Safe address"
              value={safeAddr}
              onChange={(e) =>
                setSafeAddr(e.target.value.trim().replace(/\s+/g, ""))
              }
            />
          </div>
          {!readProvider && (
            <p className="text-xs opacity-70">
              Connect a wallet (or open this app inside your Safe) to load
              on-chain data.
            </p>
          )}
          <div className="flex flex-wrap gap-2 items-center">
            <button
              onClick={async () => {
                await refreshInstallState();
                await refreshOwners();
              }}
              className="px-3 py-2 rounded bg-neutral-800 hover:bg-neutral-700"
            >
              Refresh
            </button>
            {enabled ? (
              <span className="text-emerald-300 text-sm">
                Module installed ✅
              </span>
            ) : deployed === false ? (
              <span className="text-amber-300 text-sm">
                Module not deployed
              </span>
            ) : enabled === false ? (
              <span className="text-amber-300 text-sm">
                Module deployed but not enabled
              </span>
            ) : null}
          </div>

          {!enabled &&
            readProvider &&
            ethers.isAddress(safeAddr) &&
            normalizedFactory &&
            predicted && (
              <InstallModule
                safeAddr={safeAddr}
                factoryAddr={normalizedFactory!} // non-null because of the guard above
                predictedModule={predicted}
                readProvider={readProvider as any}
                isDeployed={Boolean(deployed)}
                isEnabled={Boolean(enabled)}
                onChanged={async () => {
                  await refreshInstallState();
                  await refreshOwners();
                }}
              />
            )}

          {predicted && (
            <div className="text-xs opacity-70 break-all flex items-center gap-2">
              <span>Predicted module:</span>
              <Address addr={predicted} />
            </div>
          )}
        </section>

        <OwnersView
          key={`${safeAddr}:${predicted}:${chainId ?? "x"}`}
          safeAddr={safeAddr}
          moduleAddr={predicted}
          readProvider={readProvider as any}
          enabled={Boolean(enabled)}
          chainId={chainId}
        />

        <StatusBar text={status} />
      </main>
      <AppFooter showAiCredit={true} />
    </div>
  );
}

/** Owners & heirs table with inline editor and local datetime picker */
/** Owners & heirs table with inline editor, countdown, and resilient loading */
function OwnersView({
  safeAddr,
  moduleAddr,
  readProvider,
  enabled,
  chainId,
}: {
  safeAddr: string;
  moduleAddr: string;
  readProvider: ethers.Provider | null;
  enabled?: boolean;
  chainId?: number | null;
}) {
  const { isSafeApp } = useSafeApp();

  type Row = { owner: string; beneficiary: string; ts: bigint };
  const [rows, setRows] = useState<Row[]>([]);
  const [signerAddr, setSignerAddr] = useState<string>("");
  const [busyByOwner, setBusyByOwner] = useState<Record<string, boolean>>({});
  const [editing, setEditing] = useState<null | {
    mode: "set" | "prolong";
    owner: string;
    beneficiary: string; // only for "set"
    dtLocal: string; // YYYY-MM-DDTHH:mm
  }>(null);

  // ticks every second so the UI re-renders
  const [nowSec, setNowSec] = useState(() => Math.floor(Date.now() / 1000));
  useEffect(() => {
    const id = setInterval(
      () => setNowSec(Math.floor(Date.now() / 1000)),
      1000
    );
    return () => clearInterval(id);
  }, []);

  // keep small offset = (chain latest block time) - (local time)
  const [chainOffset, setChainOffset] = useState(0);
  useEffect(() => {
    if (!readProvider) return;
    let stop = false;

    const refresh = async () => {
      try {
        const latest = await (readProvider as any).getBlock("latest");
        const chainTs = Number(
          latest?.timestamp ?? Math.floor(Date.now() / 1000)
        );
        const localTs = Math.floor(Date.now() / 1000);
        if (!stop) setChainOffset(chainTs - localTs);
      } catch {
        // ignore; we'll try again on next tick
      }
    };

    refresh();
    const id = setInterval(refresh, 30000); // refresh offset every 30s
    return () => {
      stop = true;
      clearInterval(id);
    };
  }, [readProvider]);

  // poll latest block time (every 5s)
  useEffect(() => {
    if (!readProvider) return;
    let stop = false;

    async function tick() {
      try {
        const b = await (readProvider as any).getBlock("latest");
        if (!stop && b?.timestamp != null) {
          setChainNow(Number(b.timestamp));
        }
      } catch {
        // ignore transient RPC errors
      }
    }

    tick();
    const id = setInterval(tick, 5000);
    return () => {
      stop = true;
      clearInterval(id);
    };
  }, [readProvider]);

  // Helpers
  const fmtUTC = (ts: bigint) =>
    ts === 0n ? "—" : new Date(Number(ts) * 1000).toISOString();
  const fmtLocal = (ts: bigint) =>
    ts === 0n ? "—" : new Date(Number(ts) * 1000).toLocaleString();
  const toLocalInputValue = (ts: bigint) => {
    if (ts === 0n) return "";
    const d = new Date(Number(ts) * 1000);
    const pad = (n: number) => String(n).padStart(2, "0");
    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(
      d.getDate()
    )}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
  };
  const localInputToUtcSeconds = (v: string) => {
    const ms = Date.parse(v); // local time parsed as local
    if (!Number.isFinite(ms)) throw new Error("Enter a valid date & time.");
    return Math.floor(ms / 1000);
  };

  function fmtCountdown(ts: bigint, refSec: number) {
    if (ts === 0n) return { label: "—", isFuture: true };
    const target = Number(ts);
    const diff = target - refSec; // seconds
    const future = diff > 0;
    let d = Math.abs(diff);
    const days = Math.floor(d / 86400);
    d -= days * 86400;
    const hours = Math.floor(d / 3600);
    d -= hours * 3600;
    const mins = Math.floor(d / 60);
    d -= mins * 60;
    const secs = d;

    const parts = [
      days ? `${days}d` : null,
      hours ? `${hours}h` : null,
      mins ? `${mins}m` : null,
      `${secs}s`,
    ]
      .filter(Boolean)
      .join(" ");

    return future
      ? { label: `in ${parts}`, isFuture: true }
      : { label: `ready (since ${parts})`, isFuture: false };
  }

  // Tick every second so countdown updates
  useEffect(() => {
    const t = setInterval(() => setNowSec(Math.floor(Date.now() / 1000)), 1000);
    return () => clearInterval(t);
  }, []);

  // Capture connected EOA (for actions)
  useEffect(() => {
    (async () => {
      try {
        const eth = (window as any).ethereum;
        if (!eth) return setSignerAddr("");
        const bp = new ethers.BrowserProvider(eth);
        const s = await bp.getSigner().catch(() => null);
        setSignerAddr(s ? await s.getAddress() : "");
      } catch {
        setSignerAddr("");
      }
    })();
  }, []);

  // Load rows — owners first, enrich with module configs if code exists
  async function loadRows() {
    try {
      if (!readProvider || !ethers.isAddress(safeAddr)) {
        setRows([]);
        return;
      }

      // 1) Always fetch owners first
      const owners = await getOwners(readProvider as any, safeAddr);
      let base: Row[] = owners.map((o) => ({
        owner: o,
        beneficiary: ethers.ZeroAddress,
        ts: 0n,
      }));

      // 2) Only attempt heirConfigs if module address has code
      let hasModuleCode = false;
      if (ethers.isAddress(moduleAddr)) {
        const code = await (readProvider as any).getCode(moduleAddr);
        hasModuleCode = !!code && code !== "0x";
      }

      if (hasModuleCode) {
        const mod = new ethers.Contract(
          moduleAddr,
          HeirSafeModuleABI,
          readProvider as any
        );
        base = await Promise.all(
          base.map(async (r) => {
            try {
              const cfg = await mod.heirConfigs(r.owner);
              return {
                owner: r.owner,
                beneficiary: (cfg.beneficiary as string) || ethers.ZeroAddress,
                ts: BigInt(cfg.activationTime),
              };
            } catch (e) {
              console.debug("heirConfigs failed for", r.owner, e);
              return r; // keep owner row even if this call fails
            }
          })
        );
      }

      setRows(base);
    } catch (err) {
      console.error("[OwnersView] loadRows error:", err);
      // Keep last good rows if something transient fails
    }
  }

  // Fire load on mount and when deps change, plus poll every 30s
  useEffect(() => {
    console.log("[OwnersView] effect fired", {
      safeAddr,
      moduleAddr,
      hasProvider: !!readProvider,
    });
    loadRows();
    const t = setInterval(loadRows, 30000);
    return () => clearInterval(t);
  }, [safeAddr, moduleAddr, readProvider]);

  const canWriteGlobally =
    !!readProvider &&
    ethers.isAddress(moduleAddr) &&
    (enabled ?? true) &&
    !isSafeApp;

  // Actions
  async function doSet(owner: string, beneficiary: string, whenLocal: string) {
    try {
      setBusyByOwner((m) => ({ ...m, [owner]: true }));
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      if ((await signer.getAddress()).toLowerCase() !== owner.toLowerCase())
        throw new Error(`Connect as owner ${owner}`);
      if (!ethers.isAddress(beneficiary))
        throw new Error("Invalid beneficiary");

      const ts = localInputToUtcSeconds(whenLocal);
      if (ts <= Math.floor(Date.now() / 1000))
        throw new Error("Activation must be in the future");

      const mod = new ethers.Contract(moduleAddr, HeirSafeModuleABI, signer);
      const tx = await mod.setBeneficiary(beneficiary, ts);
      await tx.wait();
      setEditing(null);
      await loadRows();
    } catch (e: any) {
      alert(e?.reason || e?.message || String(e));
    } finally {
      setBusyByOwner((m) => ({ ...m, [owner]: false }));
    }
  }

  async function doProlong(owner: string, whenLocal: string) {
    try {
      setBusyByOwner((m) => ({ ...m, [owner]: true }));
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      if ((await signer.getAddress()).toLowerCase() !== owner.toLowerCase())
        throw new Error(`Connect as owner ${owner}`);

      const ts = localInputToUtcSeconds(whenLocal);
      if (ts <= Math.floor(Date.now() / 1000))
        throw new Error("Activation must be in the future");

      const mod = new ethers.Contract(moduleAddr, HeirSafeModuleABI, signer);
      const tx = await mod.setActivationTime(ts);
      await tx.wait();
      setEditing(null);
      await loadRows();
    } catch (e: any) {
      alert(e?.reason || e?.message || String(e));
    } finally {
      setBusyByOwner((m) => ({ ...m, [owner]: false }));
    }
  }

  async function doRemove(owner: string) {
    try {
      if (!confirm("Remove beneficiary and activation time?")) return;
      setBusyByOwner((m) => ({ ...m, [owner]: true }));
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();
      if ((await signer.getAddress()).toLowerCase() !== owner.toLowerCase())
        throw new Error(`Connect as owner ${owner}`);

      const mod = new ethers.Contract(moduleAddr, HeirSafeModuleABI, signer);

      // Prefer new removeBeneficiary(), fallback to setBeneficiary(0,0)
      const fn = mod.interface.getFunction("removeBeneficiary", []);
      let tx;
      if (fn) {
        tx = await mod.removeBeneficiary();
      } else {
        tx = await mod.setBeneficiary(ethers.ZeroAddress, 0);
      }
      await tx.wait();
      await loadRows();
    } catch (e: any) {
      alert(e?.reason || e?.message || String(e));
    } finally {
      setBusyByOwner((m) => ({ ...m, [owner]: false }));
    }
  }

  async function doClaim(owner: string) {
    try {
      setBusyByOwner((m) => ({ ...m, [owner]: true }));
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("No wallet detected");
      const bp = new ethers.BrowserProvider(eth);
      const signer = await bp.getSigner();

      const prev = await computePrevOwner(readProvider as any, safeAddr, owner);
      const mod = new ethers.Contract(moduleAddr, HeirSafeModuleABI, signer);
      const tx = await mod.claimSafe(owner, prev);
      await tx.wait();
      await loadRows();
    } catch (e: any) {
      // If it looks like "Activation time not reached", re-poll and explain
      try {
        const b = await (readProvider as any).getBlock("latest");
        if (b?.timestamp) setChainNow(Number(b.timestamp));
      } catch {}

      const msg = e?.reason || e?.message || String(e);
      if (/Activation time not reached/i.test(msg)) {
        alert(
          "Activation time not reached on-chain yet. Please wait a few seconds and try again."
        );
      } else {
        alert(msg);
      }
    } finally {
      setBusyByOwner((m) => ({ ...m, [owner]: false }));
    }
  }

  return (
    <section className="p-4 rounded-2xl bg-neutral-900 space-y-3">
      <h2 className="font-medium">Owners & heirs</h2>
      {!readProvider && (
        <p className="text-xs opacity-70">
          {chainId == null
            ? "Network: unknown"
            : CHAINS[chainId]
            ? `Network: ${CHAINS[chainId].name}`
            : `Network ${chainId} not supported`}
        </p>
      )}

      <div className="overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="text-left text-neutral-300">
            <tr className="border-t border-neutral-800/70">
              <th className="py-2 pr-4">Owner</th>
              <th className="py-2 pr-4">Beneficiary</th>
              <th className="py-2 pr-4">Activation</th>
              <th className="py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {rows.length === 0 ? (
              <tr>
                <td colSpan={4} className="p-4 text-sm opacity-70">
                  No owners found (or failed to load).
                </td>
              </tr>
            ) : (
              rows.map((r) => {
                const rowBusy = !!busyByOwner[r.owner];
                const nowB = BigInt(nowSec);
                const isOwnerSigner =
                  signerAddr &&
                  signerAddr.toLowerCase() === r.owner.toLowerCase();

                const signerIsBeneficiary =
                  signerAddr &&
                  r.beneficiary !== ethers.ZeroAddress &&
                  signerAddr.toLowerCase() === r.beneficiary.toLowerCase();

                const refSec = nowSec + chainOffset;
                const claimReady = r.ts !== 0n && refSec >= Number(r.ts) + 30; // 30s safety buffer

                const disableRowActions =
                  !canWriteGlobally || !isOwnerSigner || rowBusy;

                const disableClaim =
                  !canWriteGlobally ||
                  !signerIsBeneficiary ||
                  !claimReady ||
                  rowBusy;

                const showSet = r.beneficiary === ethers.ZeroAddress;
                const showProlong = r.beneficiary !== ethers.ZeroAddress;
                const showRemove = r.beneficiary !== ethers.ZeroAddress;

                const isEditingRow = editing && editing.owner === r.owner;

                return (
                  <>
                    <tr
                      key={r.owner}
                      className="border-t border-neutral-800 align-top"
                    >
                      <td className="py-2 pr-4 break-all">
                        <Address addr={r.owner} variant="ghost" />
                      </td>
                      <td className="py-2 pr-4 break-all">
                        <Address addr={r.beneficiary} />
                      </td>
                      <td className="py-2 pr-4">
                        {r.ts !== 0n &&
                          (() => {
                            const cd = fmtCountdown(r.ts, refSec);
                            return (
                              <span
                                className={`text-xs mt-1 ${
                                  cd.isFuture
                                    ? "text-neutral-300"
                                    : "text-emerald-300"
                                }`}
                              >
                                {cd.label}
                              </span>
                            );
                          })()}
                      </td>
                      <td className="py-2">
                        <div className="flex flex-wrap gap-2">
                          {showSet && (
                            <button
                              className="px-2 py-1 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
                              onClick={() =>
                                setEditing({
                                  mode: "set",
                                  owner: r.owner,
                                  beneficiary: "",
                                  dtLocal: "",
                                })
                              }
                              disabled={disableRowActions}
                              title={
                                !enabled
                                  ? "Module must be enabled"
                                  : isSafeApp
                                  ? "Disabled in Safe App"
                                  : !isOwnerSigner
                                  ? "Connect the owner’s wallet"
                                  : undefined
                              }
                            >
                              {rowBusy ? "…" : "Set"}
                            </button>
                          )}
                          {showProlong && (
                            <button
                              className="px-2 py-1 rounded bg-sky-700 hover:bg-sky-600 disabled:opacity-50"
                              onClick={() =>
                                setEditing({
                                  mode: "prolong",
                                  owner: r.owner,
                                  beneficiary: r.beneficiary,
                                  dtLocal: toLocalInputValue(r.ts) || "",
                                })
                              }
                              disabled={disableRowActions}
                            >
                              {rowBusy ? "…" : "Prolong"}
                            </button>
                          )}
                          {showRemove && (
                            <button
                              className="px-2 py-1 rounded bg-rose-700 hover:bg-rose-600 disabled:opacity-50"
                              onClick={() => doRemove(r.owner)}
                              disabled={disableRowActions}
                            >
                              {rowBusy ? "…" : "Remove"}
                            </button>
                          )}
                          {signerIsBeneficiary && (
                            <button
                              className="px-2 py-1 rounded bg-amber-700 hover:bg-amber-600 disabled:opacity-50"
                              onClick={() => doClaim(r.owner)}
                              disabled={disableClaim}
                              title={
                                !enabled
                                  ? "Module must be enabled"
                                  : isSafeApp
                                  ? "Disabled in Safe App"
                                  : !claimReady
                                  ? `Activation at ${fmtUTC(r.ts)}`
                                  : undefined
                              }
                            >
                              {rowBusy
                                ? "…"
                                : claimReady
                                ? "Claim"
                                : "Claim (not yet)"}
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>

                    {isEditingRow && (
                      <tr className="border-t border-neutral-800">
                        <td colSpan={4} className="py-3">
                          <div className="flex flex-wrap gap-3 items-end">
                            {editing.mode === "set" && (
                              <div className="flex flex-col gap-1">
                                <label className="text-xs opacity-70">
                                  Beneficiary
                                </label>
                                <input
                                  className="px-3 py-2 rounded bg-neutral-800 min-w-[24rem]"
                                  placeholder="0x… beneficiary"
                                  value={editing.beneficiary}
                                  onChange={(e) =>
                                    setEditing(
                                      (st) =>
                                        st && {
                                          ...st,
                                          beneficiary: e.target.value,
                                        }
                                    )
                                  }
                                />
                              </div>
                            )}
                            <div className="flex flex-col gap-1">
                              <label className="text-xs opacity-70">
                                Activation (local)
                              </label>
                              <input
                                type="datetime-local"
                                className="px-3 py-2 rounded bg-neutral-800"
                                value={editing.dtLocal}
                                onChange={(e) =>
                                  setEditing(
                                    (st) =>
                                      st && { ...st, dtLocal: e.target.value }
                                  )
                                }
                              />
                            </div>
                            <div className="flex gap-2">
                              {editing.mode === "set" ? (
                                <button
                                  className="px-3 py-2 rounded bg-emerald-700 hover:bg-emerald-600 disabled:opacity-50"
                                  onClick={() =>
                                    doSet(
                                      editing.owner,
                                      editing.beneficiary,
                                      editing.dtLocal
                                    )
                                  }
                                  disabled={
                                    !canWriteGlobally ||
                                    !signerAddr ||
                                    signerAddr.toLowerCase() !==
                                      editing.owner.toLowerCase() ||
                                    !editing.dtLocal ||
                                    (editing.mode === "set" &&
                                      !ethers.isAddress(editing.beneficiary))
                                  }
                                >
                                  Save
                                </button>
                              ) : (
                                <button
                                  className="px-3 py-2 rounded bg-sky-700 hover:bg-sky-600 disabled:opacity-50"
                                  onClick={() =>
                                    doProlong(editing.owner, editing.dtLocal)
                                  }
                                  disabled={
                                    !canWriteGlobally ||
                                    !signerAddr ||
                                    signerAddr.toLowerCase() !==
                                      editing.owner.toLowerCase() ||
                                    !editing.dtLocal
                                  }
                                >
                                  Save
                                </button>
                              )}
                              <button
                                className="px-3 py-2 rounded bg-neutral-800 hover:bg-neutral-700"
                                onClick={() => setEditing(null)}
                              >
                                Cancel
                              </button>
                            </div>
                          </div>
                        </td>
                      </tr>
                    )}
                  </>
                );
              })
            )}
          </tbody>
        </table>
      </div>
    </section>
  );
}
</file>

</files>
